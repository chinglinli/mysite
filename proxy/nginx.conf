upstream mysite-frontend-dev {
  server frontend-dev:3000 fail_timeout=5s max_fails=5;
}

upstream mysite-backend-dev {
  server backend-dev:8000 fail_timeout=5s max_fails=5;
}

upstream mysite-frontend {
  server frontend:3000 fail_timeout=5s max_fails=5;
}

upstream mysite-backend {
  server backend:8000 fail_timeout=5s max_fails=5;
}


server {
  listen 80;
  server_name dev.marco79423.net;
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name marco79423.net;
  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl;
  ssl_certificate /fullchain.pem;
  ssl_certificate_key /privkey.pem;

  server_name dev.marco79423.net;

  root /static;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_frontend;
  }

  location /static/ {
    expires 1w;
    alias /backend-static-dev/;
  }

  location /media/ {
    expires 1w;
    alias /backend-media-dev/;
  }

  location ~ /(api|auth)/ {
    expires 1d;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://mysite-backend-dev;
  }

  location @proxy_to_frontend {
    expires 7d;

    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    proxy_pass http://mysite-frontend-dev;
  }
}

server {
  listen 443 ssl;
  ssl_certificate /fullchain.pem;
  ssl_certificate_key /privkey.pem;

  server_name marco79423.net;

  root /static;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_frontend;
  }

  location /static/ {
    expires 1w;
    alias /backend-static/;
  }

  location /media/ {
    expires 1w;
    alias /backend-media/;
  }

  location ~ /(api|auth)/ {
    expires 1d;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://mysite-backend;
  }

  location @proxy_to_frontend {
    expires 7d;

    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    proxy_pass http://mysite-frontend;
  }
}
