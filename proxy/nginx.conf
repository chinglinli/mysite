upstream TARGET_NAME_frontend {
  server 127.0.0.1:PORT fail_timeout=5s max_fails=5;
}

upstream TARGET_NAME_backend {
  server unix:/var/www/TARGET_NAME/backend/app.sock fail_timeout=5s max_fails=5;
}

server {
  listen 80;
  server_name SERVER_NAME;
  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl;
  ssl_certificate /etc/letsencrypt/live/marco79423.net/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/marco79423.net/privkey.pem;

  server_name SERVER_NAME;

  root /var/www/TARGET_NAME/proxy/static;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_frontend;
  }

  location ~ /(api|static|media|auth)/ {
    expires 1d;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://TARGET_NAME_backend;
  }

  location @proxy_to_frontend {
    expires 7d;

    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    proxy_pass http://TARGET_NAME_frontend;
  }
}